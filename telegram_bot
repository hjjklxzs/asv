#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import os
import json
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, ConversationHandler

# تكوين التسجيل
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# توكن البوت
TOKEN = "7289010404:AAHC6uBYg7UFFoQmv1Z3IF4UTONaXTr-9-4"

# معرف المشرف الوحيد
ADMIN_ID = 5309697442

# معلومات المالك
OWNER_USERNAME = "@uflooe"
OWNER_CHANNEL = "https://t.me/df_okl2"

# حالات المحادثة
MAIN_MENU, ADMIN_MENU, ADD_PRODUCT, PRODUCT_NAME, PRODUCT_DESCRIPTION, PRODUCT_PRICE, PRODUCT_FILE, BROWSE_PRODUCTS, PRODUCT_DETAILS, CONFIRM_PURCHASE, ADMIN_APPROVE, WAITING_PAYMENT = range(12)

# ملف تخزين المنتجات
PRODUCTS_FILE = 'products.json'
ORDERS_FILE = 'orders.json'

# التأكد من وجود ملفات البيانات
def ensure_data_files():
    if not os.path.exists(PRODUCTS_FILE):
        with open(PRODUCTS_FILE, 'w', encoding='utf-8') as f:
            json.dump([], f, ensure_ascii=False)
    
    if not os.path.exists(ORDERS_FILE):
        with open(ORDERS_FILE, 'w', encoding='utf-8') as f:
            json.dump([], f, ensure_ascii=False)

# قراءة المنتجات
def load_products():
    try:
        with open(PRODUCTS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

# حفظ المنتجات
def save_products(products):
    with open(PRODUCTS_FILE, 'w', encoding='utf-8') as f:
        json.dump(products, f, ensure_ascii=False, indent=4)

# قراءة الطلبات
def load_orders():
    try:
        with open(ORDERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

# حفظ الطلبات
def save_orders(orders):
    with open(ORDERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)

# التحقق من صلاحية المشرف
def is_admin(user_id):
    return str(user_id) == str(ADMIN_ID)

# بداية البوت
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    
    # إنشاء لوحة المفاتيح الرئيسية
    keyboard = [
        [KeyboardButton("🛍 تصفح المنتجات")],
        [KeyboardButton("📞 تواصل مع المالك"), KeyboardButton("/start")]
    ]
    
    # إضافة زر المشرف إذا كان المستخدم هو المشرف
    if is_admin(user.id):
        keyboard.append([KeyboardButton("🔐 لوحة المشرف")])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"مرحباً {user.first_name} في متجر {OWNER_USERNAME} الرقمي! 🎉\n\n"
        f"يمكنك تصفح المنتجات المتاحة والشراء بكل سهولة.\n\n"
        f"للمساعدة، تواصل مع المالك مباشرة: {OWNER_USERNAME}\n"
        f"قناة المتجر: {OWNER_CHANNEL}",
        reply_markup=reply_markup
    )
    
    return MAIN_MENU

# لوحة المشرف
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("عذراً، هذه الميزة متاحة للمشرف فقط.")
        return MAIN_MENU
    
    keyboard = [
        [KeyboardButton("➕ إضافة منتج جديد")],
        [KeyboardButton("📊 عرض الطلبات"), KeyboardButton("🗑 حذف منتج")],
        [KeyboardButton("🔙 العودة للقائمة الرئيسية")]
    ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "مرحباً بك في لوحة المشرف! 🔐\n"
        "يمكنك إدارة المنتجات والطلبات من هنا.",
        reply_markup=reply_markup
    )
    
    return ADMIN_MENU

# بدء إضافة منتج جديد
async def add_product_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("عذراً، هذه الميزة متاحة للمشرف فقط.")
        return MAIN_MENU
    
    await update.message.reply_text(
        "لنبدأ بإضافة منتج جديد! 🆕\n\n"
        "أولاً، أرسل اسم المنتج:"
    )
    
    return PRODUCT_NAME

# استقبال اسم المنتج
async def receive_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['product_name'] = update.message.text
    
    await update.message.reply_text(
        "تم استلام اسم المنتج! ✅\n\n"
        "الآن، أرسل وصف المنتج:"
    )
    
    return PRODUCT_DESCRIPTION

# استقبال وصف المنتج
async def receive_product_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['product_description'] = update.message.text
    
    await update.message.reply_text(
        "تم استلام وصف المنتج! ✅\n\n"
        "الآن، أرسل سعر المنتج (رقم فقط):"
    )
    
    return PRODUCT_PRICE

# استقبال سعر المنتج
async def receive_product_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        price = float(update.message.text)
        context.user_data['product_price'] = price
        
        await update.message.reply_text(
            "تم استلام سعر المنتج! ✅\n\n"
            "أخيراً، أرسل الملف (صورة، فيديو، ملف، إلخ) الذي تريد بيعه:"
        )
        
        return PRODUCT_FILE
    except ValueError:
        await update.message.reply_text(
            "عذراً، يجب أن يكون السعر رقماً. حاول مرة أخرى:"
        )
        
        return PRODUCT_PRICE

# استقبال ملف المنتج
async def receive_product_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = update.message
    
    # تحديد نوع الملف وحفظ معرفه
    file_id = None
    file_type = None
    
    if message.photo:
        file_id = message.photo[-1].file_id
        file_type = "photo"
    elif message.document:
        file_id = message.document.file_id
        file_type = "document"
    elif message.video:
        file_id = message.video.file_id
        file_type = "video"
    elif message.audio:
        file_id = message.audio.file_id
        file_type = "audio"
    elif message.voice:
        file_id = message.voice.file_id
        file_type = "voice"
    elif message.text:
        file_id = message.text
        file_type = "text"
    
    if not file_id:
        await message.reply_text(
            "عذراً، لم أتمكن من التعرف على الملف. حاول مرة أخرى:"
        )
        return PRODUCT_FILE
    
    # إنشاء معرف فريد للمنتج
    product_id = str(int(time.time()))
    
    # إنشاء المنتج الجديد
    new_product = {
        "id": product_id,
        "name": context.user_data['product_name'],
        "description": context.user_data['product_description'],
        "price": context.user_data['product_price'],
        "file_id": file_id,
        "file_type": file_type,
        "added_by": update.effective_user.id,
        "added_at": int(time.time())
    }
    
    # حفظ المنتج
    products = load_products()
    products.append(new_product)
    save_products(products)
    
    # تنظيف بيانات المستخدم
    context.user_data.clear()
    
    await message.reply_text(
        "تم إضافة المنتج بنجاح! ✅\n\n"
        f"اسم المنتج: {new_product['name']}\n"
        f"السعر: {new_product['price']}\n\n"
        "يمكنك الآن إضافة منتج آخر أو العودة للوحة المشرف."
    )
    
    return ADMIN_MENU

# تصفح المنتجات
async def browse_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    products = load_products()
    
    if not products:
        await update.message.reply_text(
            "لا توجد منتجات متاحة حالياً. 😔\n"
            "يرجى التحقق لاحقاً."
        )
        return MAIN_MENU
    
    # إنشاء قائمة بأزرار المنتجات
    keyboard = []
    for product in products:
        keyboard.append([InlineKeyboardButton(f"{product['name']} - {product['price']} $", callback_data=f"product_{product['id']}")])
    
    keyboard.append([InlineKeyboardButton("🔙 العودة", callback_data="back_to_main")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "المنتجات المتاحة للشراء: 🛍\n"
        "اختر منتجاً للاطلاع على التفاصيل:",
        reply_markup=reply_markup
    )
    
    return BROWSE_PRODUCTS

# عرض تفاصيل المنتج
async def product_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_main":
        await query.message.delete()
        return MAIN_MENU
    
    product_id = query.data.split("_")[1]
    products = load_products()
    
    product = next((p for p in products if p['id'] == product_id), None)
    
    if not product:
        await query.message.edit_text(
            "عذراً، المنتج غير متوفر. 😔"
        )
        return BROWSE_PRODUCTS
    
    # إنشاء أزرار التفاصيل
    keyboard = [
        [InlineKeyboardButton("🛒 شراء الآن", callback_data=f"buy_{product_id}")],
        [InlineKeyboardButton("🔙 العودة للمنتجات", callback_data="back_to_products")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # إرسال تفاصيل المنتج
    await query.message.edit_text(
        f"📦 *{product['name']}*\n\n"
        f"📝 *الوصف:* {product['description']}\n\n"
        f"💰 *السعر:* {product['price']} $\n\n"
        f"🛒 اضغط على 'شراء الآن' لطلب هذا المنتج.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return PRODUCT_DETAILS

# العودة لقائمة المنتجات
async def back_to_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    products = load_products()
    
    if not products:
        await query.message.edit_text(
            "لا توجد منتجات متاحة حالياً. 😔\n"
            "يرجى التحقق لاحقاً."
        )
        return MAIN_MENU
    
    # إنشاء قائمة بأزرار المنتجات
    keyboard = []
    for product in products:
        keyboard.append([InlineKeyboardButton(f"{product['name']} - {product['price']} $", callback_data=f"product_{product['id']}")])
    
    keyboard.append([InlineKeyboardButton("🔙 العودة", callback_data="back_to_main")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        "المنتجات المتاحة للشراء: 🛍\n"
        "اختر منتجاً للاطلاع على التفاصيل:",
        reply_markup=reply_markup
    )
    
    return BROWSE_PRODUCTS

# بدء عملية الشراء
async def start_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    product_id = query.data.split("_")[1]
    products = load_products()
    
    product = next((p for p in products if p['id'] == product_id), None)
    
    if not product:
        await query.message.edit_text(
            "عذراً، المنتج غير متوفر. 😔"
        )
        return BROWSE_PRODUCTS
    
    # حفظ معلومات المنتج في بيانات المستخدم
    context.user_data['purchase_product_id'] = product_id
    
    # إنشاء أزرار تأكيد الشراء
    keyboard = [
        [InlineKeyboardButton("✅ تأكيد الشراء", callback_data="confirm_purchase")],
        [InlineKeyboardButton("❌ إلغاء", callback_data=f"product_{product_id}")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        f"🛒 *تأكيد الشراء*\n\n"
        f"📦 المنتج: *{product['name']}*\n"
        f"💰 السعر: *{product['price']} $*\n\n"
        f"للشراء، يرجى التواصل مع المالك {OWNER_USERNAME} وإرسال الرصيد.\n"
        f"بعد التأكيد، سيتم إرسال المنتج لك تلقائياً.\n\n"
        f"هل تريد المتابعة؟",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return CONFIRM_PURCHASE

# تأكيد الشراء
async def confirm_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    if query.data != "confirm_purchase":
        return PRODUCT_DETAILS
    
    product_id = context.user_data.get('purchase_product_id')
    if not product_id:
        await query.message.edit_text(
            "عذراً، حدث خطأ في عملية الشراء. يرجى المحاولة مرة أخرى."
        )
        return MAIN_MENU
    
    products = load_products()
    product = next((p for p in products if p['id'] == product_id), None)
    
    if not product:
        await query.message.edit_text(
            "عذراً، المنتج غير متوفر. 😔"
        )
        return BROWSE_PRODUCTS
    
    # إنشاء طلب جديد
    order = {
        "id": str(int(time.time())),
        "product_id": product_id,
        "product_name": product['name'],
        "product_price": product['price'],
        "user_id": update.effective_user.id,
        "user_name": update.effective_user.first_name,
        "username": update.effective_user.username,
        "status": "pending",
        "created_at": int(time.time())
    }
    
    # حفظ الطلب
    orders = load_orders()
    orders.append(order)
    save_orders(orders)
    
    # إرسال إشعار للمشرف
    try:
        admin_keyboard = [
            [InlineKeyboardButton("✅ الموافقة على الطلب", callback_data=f"approve_{order['id']}")],
            [InlineKeyboardButton("❌ رفض الطلب", callback_data=f"reject_{order['id']}")]
        ]
        
        admin_markup = InlineKeyboardMarkup(admin_keyboard)
        
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"🔔 *طلب شراء جديد*\n\n"
                 f"🆔 رقم الطلب: `{order['id']}`\n"
                 f"👤 المشتري: {order['user_name']} (@{order['username']})\n"
                 f"📦 المنتج: *{product['name']}*\n"
                 f"💰 السعر: *{product['price']} $*\n\n"
                 f"يرجى التحقق من استلام الرصيد قبل الموافقة.",
            reply_markup=admin_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error sending notification to admin: {e}")
    
    # إخبار المستخدم
    await query.message.edit_text(
        f"✅ *تم إرسال طلبك بنجاح!*\n\n"
        f"📦 المنتج: *{product['name']}*\n"
        f"💰 السعر: *{product['price']} $*\n\n"
        f"يرجى التواصل مع المالك {OWNER_USERNAME} لإتمام عملية الدفع.\n"
        f"بعد التأكد من الدفع، سيتم إرسال المنتج لك تلقائياً.\n\n"
        f"شكراً لك! 🙏",
        parse_mode='Markdown'
    )
    
    # تنظيف بيانات المستخدم
    if 'purchase_product_id' in context.user_data:
        del context.user_data['purchase_product_id']
    
    return MAIN_MENU

# الموافقة على الطلب
async def approve_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.message.reply_text("عذراً، هذه الميزة متاحة للمشرف فقط.")
        return MAIN_MENU
    
    order_id = query.data.split("_")[1]
    orders = load_orders()
    
    order_index = next((i for i, o in enumerate(orders) if o['id'] == order_id), None)
    
    if order_index is None:
        await query.message.edit_text(
            "عذراً، الطلب غير موجود. 😔"
        )
        return ADMIN_MENU
    
    # تحديث حالة الطلب
    orders[order_index]['status'] = "approved"
    orders[order_index]['approved_at'] = int(time.time())
    save_orders(orders)
    
    # الحصول على معلومات المنتج
    products = load_products()
    product = next((p for p in products if p['id'] == orders[order_index]['product_id']), None)
    
    if not product:
        await query.message.edit_text(
            "تمت الموافقة على الطلب، لكن المنتج غير متوفر. 😔"
        )
        return ADMIN_MENU
    
    # إرسال المنتج للمشتري
    try:
        user_id = orders[order_index]['user_id']
        
        # إرسال رسالة تأكيد أولاً
        await context.bot.send_message(
            chat_id=user_id,
            text=f"🎉 *تم الموافقة على طلبك!*\n\n"
                 f"📦 المنتج: *{product['name']}*\n"
                 f"💰 السعر: *{product['price']} $*\n\n"
                 f"جاري إرسال المنتج لك الآن...",
            parse_mode='Markdown'
        )
        
        # إرسال المنتج حسب نوعه
        if product['file_type'] == "photo":
            await context.bot.send_photo(
                chat_id=user_id,
                photo=product['file_id'],
                caption=f"🎁 *{product['name']}*\n\n{product['description']}\n\nشكراً لشرائك من متجرنا! {OWNER_USERNAME}",
                parse_mode='Markdown'
            )
        elif product['file_type'] == "document":
            await context.bot.send_document(
                chat_id=user_id,
                document=product['file_id'],
                caption=f"🎁 *{product['name']}*\n\n{product['description']}\n\nشكراً لشرائك من متجرنا! {OWNER_USERNAME}",
                parse_mode='Markdown'
            )
        elif product['file_type'] == "video":
            await context.bot.send_video(
                chat_id=user_id,
                video=product['file_id'],
                caption=f"🎁 *{product['name']}*\n\n{product['description']}\n\nشكراً لشرائك من متجرنا! {OWNER_USERNAME}",
                parse_mode='Markdown'
            )
        elif product['file_type'] == "audio":
            await context.bot.send_audio(
                chat_id=user_id,
                audio=product['file_id'],
                caption=f"🎁 *{product['name']}*\n\n{product['description']}\n\nشكراً لشرائك من متجرنا! {OWNER_USERNAME}",
                parse_mode='Markdown'
            )
        elif product['file_type'] == "voice":
            await context.bot.send_voice(
                chat_id=user_id,
                voice=product['file_id'],
                caption=f"🎁 *{product['name']}*\n\n{product['description']}\n\nشكراً لشرائك من متجرنا! {OWNER_USERNAME}",
                parse_mode='Markdown'
            )
        elif product['file_type'] == "text":
            await context.bot.send_message(
                chat_id=user_id,
                text=f"🎁 *{product['name']}*\n\n{product['description']}\n\n{product['file_id']}\n\nشكراً لشرائك من متجرنا! {OWNER_USERNAME}",
                parse_mode='Markdown'
            )
        
        # تحديث رسالة المشرف
        await query.message.edit_text(
            f"✅ *تمت الموافقة على الطلب وإرسال المنتج*\n\n"
            f"🆔 رقم الطلب: `{order_id}`\n"
            f"👤 المشتري: {orders[order_index]['user_name']} (@{orders[order_index]['username']})\n"
            f"📦 المنتج: *{product['name']}*\n"
            f"💰 السعر: *{product['price']} $*\n\n"
            f"تم إرسال المنتج للمشتري بنجاح. ✅",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error sending product to user: {e}")
        await query.message.edit_text(
            f"❌ *حدث خطأ أثناء إرسال المنتج*\n\n"
            f"🆔 رقم الطلب: `{order_id}`\n"
            f"👤 المشتري: {orders[order_index]['user_name']} (@{orders[order_index]['username']})\n"
            f"📦 المنتج: *{product['name']}*\n"
            f"💰 السعر: *{product['price']} $*\n\n"
            f"الخطأ: {str(e)}",
            parse_mode='Markdown'
        )
    
    return ADMIN_MENU

# رفض الطلب
async def reject_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.message.reply_text("عذراً، هذه الميزة متاحة للمشرف فقط.")
        return MAIN_MENU
    
    order_id = query.data.split("_")[1]
    orders = load_orders()
    
    order_index = next((i for i, o in enumerate(orders) if o['id'] == order_id), None)
    
    if order_index is None:
        await query.message.edit_text(
            "عذراً، الطلب غير موجود. 😔"
        )
        return ADMIN_MENU
    
    # تحديث حالة الطلب
    orders[order_index]['status'] = "rejected"
    orders[order_index]['rejected_at'] = int(time.time())
    save_orders(orders)
    
    # إخبار المشتري
    try:
        user_id = orders[order_index]['user_id']
        
        await context.bot.send_message(
            chat_id=user_id,
            text=f"❌ *تم رفض طلبك*\n\n"
                 f"📦 المنتج: *{orders[order_index]['product_name']}*\n"
                 f"💰 السعر: *{orders[order_index]['product_price']} $*\n\n"
                 f"يرجى التواصل مع المالك {OWNER_USERNAME} لمزيد من المعلومات.",
            parse_mode='Markdown'
        )
        
        # تحديث رسالة المشرف
        await query.message.edit_text(
            f"❌ *تم رفض الطلب*\n\n"
            f"🆔 رقم الطلب: `{order_id}`\n"
            f"👤 المشتري: {orders[order_index]['user_name']} (@{orders[order_index]['username']})\n"
            f"📦 المنتج: *{orders[order_index]['product_name']}*\n"
            f"💰 السعر: *{orders[order_index]['product_price']} $*\n\n"
            f"تم إخبار المشتري بالرفض.",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error notifying user about rejection: {e}")
        await query.message.edit_text(
            f"❌ *تم رفض الطلب، لكن حدث خطأ أثناء إخبار المشتري*\n\n"
            f"🆔 رقم الطلب: `{order_id}`\n"
            f"👤 المشتري: {orders[order_index]['user_name']} (@{orders[order_index]['username']})\n"
            f"📦 المنتج: *{orders[order_index]['product_name']}*\n"
            f"💰 السعر: *{orders[order_index]['product_price']} $*\n\n"
            f"الخطأ: {str(e)}",
            parse_mode='Markdown'
        )
    
    return ADMIN_MENU

# عرض الطلبات
async def view_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("عذراً، هذه الميزة متاحة للمشرف فقط.")
        return MAIN_MENU
    
    orders = load_orders()
    
    if not orders:
        await update.message.reply_text(
            "لا توجد طلبات حالياً. 📭"
        )
        return ADMIN_MENU
    
    # فلترة الطلبات حسب الحالة
    pending_orders = [o for o in orders if o['status'] == 'pending']
    approved_orders = [o for o in orders if o['status'] == 'approved']
    rejected_orders = [o for o in orders if o['status'] == 'rejected']
    
    # إنشاء نص الطلبات
    text = "*📋 قائمة الطلبات*\n\n"
    
    if pending_orders:
        text += "*🕒 طلبات قيد الانتظار:*\n"
        for order in pending_orders:
            text += f"- {order['product_name']} ({order['product_price']} $) - @{order['username']}\n"
        text += "\n"
    
    if approved_orders:
        text += "*✅ طلبات تمت الموافقة عليها:*\n"
        for order in approved_orders:
            text += f"- {order['product_name']} ({order['product_price']} $) - @{order['username']}\n"
        text += "\n"
    
    if rejected_orders:
        text += "*❌ طلبات مرفوضة:*\n"
        for order in rejected_orders:
            text += f"- {order['product_name']} ({order['product_price']} $) - @{order['username']}\n"
    
    await update.message.reply_text(
        text,
        parse_mode='Markdown'
    )
    
    return ADMIN_MENU

# حذف منتج
async def delete_product_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("عذراً، هذه الميزة متاحة للمشرف فقط.")
        return MAIN_MENU
    
    products = load_products()
    
    if not products:
        await update.message.reply_text(
            "لا توجد منتجات لحذفها. 📭"
        )
        return ADMIN_MENU
    
    # إنشاء قائمة بأزرار المنتجات للحذف
    keyboard = []
    for product in products:
        keyboard.append([InlineKeyboardButton(f"{product['name']} - {product['price']} $", callback_data=f"delete_{product['id']}")])
    
    keyboard.append([InlineKeyboardButton("🔙 العودة", callback_data="back_to_admin")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "اختر المنتج الذي تريد حذفه:",
        reply_markup=reply_markup
    )
    
    return ADMIN_MENU

# تأكيد حذف المنتج
async def delete_product_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_admin":
        await query.message.delete()
        return ADMIN_MENU
    
    product_id = query.data.split("_")[1]
    products = load_products()
    
    product = next((p for p in products if p['id'] == product_id), None)
    
    if not product:
        await query.message.edit_text(
            "عذراً، المنتج غير موجود. 😔"
        )
        return ADMIN_MENU
    
    # حذف المنتج
    products = [p for p in products if p['id'] != product_id]
    save_products(products)
    
    await query.message.edit_text(
        f"✅ تم حذف المنتج *{product['name']}* بنجاح."
    )
    
    return ADMIN_MENU

# التواصل مع المالك
async def contact_owner(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        f"للتواصل مع مالك المتجر، يرجى استخدام:\n\n"
        f"👤 حساب المالك: {OWNER_USERNAME}\n"
        f"📢 قناة المتجر: {OWNER_CHANNEL}\n\n"
        f"شكراً لاهتمامك! 🙏"
    )
    
    return MAIN_MENU

# حول المتجر
async def about_store(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        f"🏪 *مرحباً بك في متجر {OWNER_USERNAME} الرقمي*\n\n"
        f"متجرنا متخصص في بيع المنتجات الرقمية بجميع أنواعها:\n"
        f"📱 تطبيقات\n"
        f"📂 ملفات\n"
        f"🖼 صور\n"
        f"🎬 فيديوهات\n"
        f"📝 نصوص\n"
        f"وغيرها الكثير!\n\n"
        f"👤 المالك: {OWNER_USERNAME}\n"
        f"📢 قناة المتجر: {OWNER_CHANNEL}\n\n"
        f"شكراً لزيارتك! 🙏",
        parse_mode='Markdown'
    )
    
    return MAIN_MENU

# معالجة الرسائل العادية
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    
    if text == "🛍 تصفح المنتجات":
        return await browse_products(update, context)
    elif text == "📞 تواصل مع المالك":
        return await contact_owner(update, context)
    elif text == "/start":
        return await about_store(update, context)
    elif text == "🔐 لوحة المشرف":
        return await admin_panel(update, context)
    elif text == "➕ إضافة منتج جديد":
        return await add_product_start(update, context)
    elif text == "📊 عرض الطلبات":
        return await view_orders(update, context)
    elif text == "🗑 حذف منتج":
        return await delete_product_start(update, context)
    elif text == "🔙 العودة للقائمة الرئيسية":
        return await start(update, context)
    else:
        await update.message.reply_text(
            "عذراً، لم أفهم طلبك. يرجى استخدام الأزرار للتنقل في المتجر."
        )
        return MAIN_MENU

# معالجة الاستدعاءات
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    
    if query.data.startswith("product_"):
        return await product_details(update, context)
    elif query.data == "back_to_products":
        return await back_to_products(update, context)
    elif query.data.startswith("buy_"):
        return await start_purchase(update, context)
    elif query.data == "confirm_purchase":
        return await confirm_purchase(update, context)
    elif query.data.startswith("approve_"):
        return await approve_order(update, context)
    elif query.data.startswith("reject_"):
        return await reject_order(update, context)
    elif query.data.startswith("delete_"):
        return await delete_product_confirm(update, context)
    elif query.data == "back_to_admin":
        return await admin_panel(update, context)
    elif query.data == "back_to_main":
        await query.message.delete()
        return MAIN_MENU
    else:
        await query.answer("عذراً، حدث خطأ ما.")
        return MAIN_MENU

def main() -> None:
    """تشغيل البوت."""
    # التأكد من وجود ملفات البيانات
    ensure_data_files()
    
    # إنشاء التطبيق وإضافة المعالجات
    application = Application.builder().token(TOKEN).build()
    
    # إنشاء محادثة
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
                CallbackQueryHandler(handle_callback)
            ],
            ADMIN_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
                CallbackQueryHandler(handle_callback)
            ],
            ADD_PRODUCT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_product_start)
            ],
            PRODUCT_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_product_name)
            ],
            PRODUCT_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_product_description)
            ],
            PRODUCT_PRICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_product_price)
            ],
            PRODUCT_FILE: [
                MessageHandler(filters.PHOTO, receive_product_file),
                MessageHandler(filters.Document.ALL, receive_product_file),
                MessageHandler(filters.VIDEO, receive_product_file),
                MessageHandler(filters.AUDIO, receive_product_file),
                MessageHandler(filters.VOICE, receive_product_file),
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_product_file)
            ],
            BROWSE_PRODUCTS: [
                CallbackQueryHandler(handle_callback)
            ],
            PRODUCT_DETAILS: [
                CallbackQueryHandler(handle_callback)
            ],
            CONFIRM_PURCHASE: [
                CallbackQueryHandler(handle_callback)
            ],
            ADMIN_APPROVE: [
                CallbackQueryHandler(handle_callback)
            ],
            WAITING_PAYMENT: [
                CallbackQueryHandler(handle_callback)
            ]
        },
        fallbacks=[CommandHandler("start", start)],
    )
    
    application.add_handler(conv_handler)
    
    # بدء البوت
    application.run_polling()

if __name__ == '__main__':
    main()
